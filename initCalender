#!/usr/bin/env bash

#when you return from learning about bash/shell data structures and algorithms, learning how it stores values and passes references, etc.,you plan to implement the following: 
#use the below jan-dec global variables in a function that all init funcs can use, and further add to this function a way for it to be stored in an array that the other init funcs can use without them interfeering with eachother, each having their own state to whatever extent possible, also in this function write a long switch statement with global variables for the possible date %m%Y%b%d...etc., so that the innitFuncs can use their own local variables to interface with the global variables array.
mkdirPath="/bin/mkdir"
datePath="/bin/date"
declare -r currentYear="$($datePath -j +%Y)"


makeCalTemplateFor() {

local jan="$($datePath -j -f $dateInput 01$day$year +$dateOutput)"_$calenderName
local feb="$($datePath -j -f $dateInput 02$day$year +$dateOutput)"_$calenderName
local mar="$($datePath -j -f $dateInput 03$day$year +$dateOutput)"_$calenderName
local apr="$($datePath -j -f $dateInput 04$day$year +$dateOutput)"_$calenderName
local may="$($datePath -j -f $dateInput 05$day$year +$dateOutput)"_$calenderName
local jun="$($datePath -j -f $dateInput 06$day$year +$dateOutput)"_$calenderName
local jul="$($datePath -j -f $dateInput 07$day$year +$dateOutput)"_$calenderName
local aug="$($datePath -j -f $dateInput 08$day$year +$dateOutput)"_$calenderName
local sep="$($datePath -j -f $dateInput 09$day$year +$dateOutput)"_$calenderName
local oct="$($datePath -j -f $dateInput 10$day$year +$dateOutput)"_$calenderName
local nov="$($datePath -j -f $dateInput 11$day$year +$dateOutput)"_$calenderName
local dec="$($datePath -j -f $dateInput 12$day$year +$dateOutput)"_$calenderName

local -n referenceAllMonths="$1" || return 1
local -ag referenceAllMonths=($jan $feb $mar $apr $may $jun $jul $aug $sep $oct $nov $dec)
}

getAllMonthsArray() {

for monthIndex in {01..12}
   do
	allMonths="$($datePath -j -f %m%Y $monthIndex$thisYear +%m%b)"_$calenderName
	return_allMonthsArray+=($allMonths)
   done
 
}

initAllMonthsFunc() {

for monthIndex in {01..12}
   do
	allMonths="$($datePath -j -f %m%Y $monthIndex$thisYear +%m%b)"_$calenderName
	return_allMonthsArray+=($allMonths)

	if   [[ "$mkdirMonths" == "true" ]]; then 
		$mkdirPath -p $initYearPath/$allMonths && echo "$allMonths directory has successfully been created in $thisYear.$calenderName." 
	elif [[ "$mkdirMonths" == "false" ]]; then 
		echo "warning: allMonths directories have not been created, mkdirMonths variable is set to $mkdirMonths." && break 
	elif [[ -n "$mkdirMonths" ]]; then 
		echo "mkdirMonths:$mkdirMonths is mis-spelled or it does  not exist, it needs to be either true or false." && $(rm -R $initYearPath) && break	
	else  
		: 		
	fi
   done
}

initYear() {

local -r currentYearPath="$(pwd)/$currentYear"
local -r currentYearName=$currentYearPath"_$calenderName"
$mkdirPath $currentYearName 

}

initMonths() {
#makeCalTemplateFor syntax: dateInput, day, year, dateOutput
local -r dateInput='%m%d%Y' #"MM/DD/YYYY" 
local -r day='01'
local -r year="$(date -j +%Y)" # current year
#local -r year="$(date -j -v-1y +%Y)" # 1 year ago
#local -r year="$(date -j -v-2y +%Y)" # 2 years ago
#local -r dateOutput='%m%B' #"MM/full month name" "01January 02February 03March"
local -r dateOutput='%m%b' #"MM/month name abbreviated" "01Jan 02Feb 03Mar" 

makeCalTemplateFor allMonths
#local -rn testArray=referenceAllMonths
#echo ${testArray[3]}
echo ${referenceAllMonths[3]}
}

initMonths2() {
#makeCalTemplateFor syntax: dateInput, day, year, dateOutput
local -r dateInput='%m%d%Y' #"MM/DD/YYYY" 
local -r day='05'
local -r year="$(date -j +%Y)" # current year
#local -r year="$(date -j -v-1y +%Y)" # 1 year ago
#local -r year="$(date -j -v-2y +%Y)" # 2 years ago
#local -r dateOutput='%m%B' #"MM/full month name" "01January 02February 03March"
local -r dateOutput='%m%b' #"MM/month name abbreviated" "01Jan 02Feb 03Mar" 

makeCalTemplateFor allMonths2
#local -rn testArray=referenceAllMonths
#echo ${testArray[3]}
echo ${referenceAllMonths[3]}
}

#initMonths() {
##local mkdirMonths="false"
#local mkdirMonths="true"
#
#initAllMonthsFunc; 
#}

initWeeks() {

local thisYear="$($datePath -j +%Y)"
local allWeeksArray=()
#local allMonthsArray=($globalMonths)
#
#local jan=${allMonthsArray[0]}
#local feb=${allMonthsArray[1]}
#local mar=${allMonthsArray[2]}
#local apr=${allMonthsArray[3]}
#local may=${allMonthsArray[4]}
#local jun=${allMonthsArray[5]}
#local jul=${allMonthsArray[6]}
#local aug=${allMonthsArray[7]}
#local sep=${allMonthsArray[8]}
#local oct=${allMonthsArray[9]}
#local nov=${allMonthsArray[10]}
#local dec=${allMonthsArray[11]}
#
local thisYear="$($datePath -j +%Y)"
#globalGetAllMonths


#for weekIndex in {01..366..07}
#  do 
#    local allWeeks="$($datePath -j -f %j%Y $weekIndex$thisYear +%b_%A%d_week%V)"_$calenderName
#
#    allWeeksArray+=($allWeeks)
#    #$mkDir -p $decPath/{$allWeeksOfDec},}
#  done
echo ${allMonthsArray[@]}
#echo $jan
 }

read -p "Enter the name of your calender: " calenderName
initYear
initMonths
initMonths2
#initWeeks
#initDaysd
#
#configWorkPlaylist() {
#
#local dateInput='%m%d%Y'
#local day='01'
#local year="$thisYear"
#local dateOutput='%m%b'
#
#
#
#newCalTemplate workPlaylist
#}
#configWorkPlaylist
#mkdir -p head/{shoulders/{hand,feet},}



